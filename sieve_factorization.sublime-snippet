<snippet>
	<content><![CDATA[
const int N = (int)2e5;
vector<int> isPrime(N + 1), prime;

void initiate() {
    for (int i = 0; i <= N; ++i) {
        if (i & 1) isPrime[i] = 1;
        else isPrime[i] = 0;
    }
    isPrime[0] = 0, isPrime[1] = 0, isPrime[2] = 1;
    for (int i = 3; i * i <= N; i += 2) {
        if (isPrime[i]) {
            for (int j = i * i; j <= N; j += (2 * i)) {
                isPrime[j] = 0;
            }
        }
    }
    for (int i = 0; i <= N; i++) {
        if (isPrime[i]) prime.push_back(i);
    }
}

vector<pair<int, int>> factorize(int x) {//set N to sqrt of upper bound 
    vector<pair<int, int>> factor;
    for (auto &p : prime) {
        if (p > x) break;
        int cnt = 0;
        while (x % p == 0) x /= p, cnt++;
        if (cnt) factor.push_back({p, cnt});
    }
    if (x > 1) factor.push_back({x, 1});
    return factor;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>sieve_factorization</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
