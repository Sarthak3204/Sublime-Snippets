<snippet>
    <content><![CDATA[
class dsu_rollback {
public:
    int components;
    vector<int> rank, parent, siz;
    stack<tuple<int, int, int, int>> op; //a, b, rankA, rankB

    dsu_rollback() {}
    dsu_rollback(int n) {
        components = n;
        rank.resize(n);
        parent.resize(n);
        iota(all(parent), 0);
    }

    int find(int v) {
        return (v == parent[v] ? v : find(parent[v]));
    }

    bool unite(int a, int b) {
        a = find(a);
        b = find(b);
        if (a == b) return false;

        if (rank[a] < rank[b]) swap(a, b);
        op.push(make_tuple(a, b, rank[a], rank[b]));

        components--;
        parent[b] = a;
        rank[a] += rank[a] == rank[b];

        return true;
    }

    void rollback() {
        if (op.empty()) return;

        auto [a, b, rankA, rankB] = op.top();
        op.pop();

        components++;
        parent[a] = a;
        parent[b] = b;
        rank[a] = rankA;
        rank[b] = rankB;
    }
};

class Dynamic_Connectivity {
public:
    dsu_rollback d;
    vector<int> ans;
    vector<vector<tuple<int, int, int>>> tree; //a, b, united
    int n, s = 1;

    Dynamic_Connectivity(int q, int n) : n(n) {
        while (s < q) s <<= 1;
        ans.resize(s);
        tree.resize(s << 1);
        d = dsu_rollback(n);
    }

    void update(int a, int b, int l, int r, int node, int lo, int hi) {
        if (l <= lo and hi <= r) {
            tree[node].push_back(make_tuple(a, b, 0));
            return;
        }
        if (lo > r or hi < l) return;

        int mid = (lo + hi) >> 1;
        update(a, b, l, r, node << 1, lo, mid);
        update(a, b, l, r, node << 1 | 1, mid + 1, hi);
    }

    void update(int a, int b, int l, int r) {//[l, r] -> active
        if (l > r) return;
        update(a, b, l, r, 1, 0, s - 1);
    }

    void dfs(int node, int lo, int hi) {
        for (auto &[a, b, united] : tree[node])
            united = d.unite(a, b);

        if (lo != hi) {
            int mid = (lo + hi) >> 1;
            dfs(node << 1, lo, mid);
            dfs(node << 1 | 1, mid + 1, hi);
        }
        else ans[lo] = d.components;

        for (auto &[a, b, united] : tree[node])
            if (united) d.rollback();
    }

    void dfs() {
        dfs(1, 0, s - 1);
    }
};
]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>dynamic_connectivity</tabTrigger>
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <!-- <scope>source.python</scope> -->
</snippet>
