<snippet>
    <content><![CDATA[
//https://cses.fi/problemset/task/2133/
#include<bits/stdc++.h>
 
#define sz(x)          (int)(x.size())
#define all(x)         x.begin(), x.end()
 
using namespace std;
 
class dsu_rollback {
public:
    int components;
    vector<int> rank, parent, siz;
    stack<array<int, 6>> op;//a, b, rankA, rankB, sizA, sizB

    dsu_rollback() {}
    dsu_rollback(int n) {
        components = n;
        rank.resize(n);
        siz.resize(n, 1);
        parent.resize(n);
        iota(all(parent), 0);
    }

    int find(int v) {
        return (v == parent[v] ? v : find(parent[v]));
    }

    bool unite(int a, int b) {
        a = find(a);
        b = find(b);
        if (a == b) return false;

        if (rank[a] < rank[b]) swap(a, b);
        op.push({a, b, rank[a], rank[b], siz[a], siz[b]});

        components--;
        parent[b] = a;
        siz[a] += siz[b];
        rank[a] += rank[a] == rank[b];

        return true;
    }

    void rollback() {
        if (op.empty()) return;

        auto [a, b, rankA, rankB, sizA, sizB] = op.top();
        op.pop();

        components++;
        parent[a] = a;
        parent[b] = b;
        siz[a] = sizA;
        siz[b] = sizB;
        rank[a] = rankA;
        rank[b] = rankB;
    }
};
 
class Dynamic_Connectivity {
public:
    dsu_rollback d;
    vector<int> ans;
    vector<vector<array<int, 3>>> tree;//a, b, united
    int n, s = 1;
 
    Dynamic_Connectivity(int q, int n) : n(n) {
        while (s < q) s <<= 1;
        ans.resize(s);
        tree.resize(s << 1);
        d = dsu_rollback(n);
    }
 
    void update(int a, int b, int l, int r, int node, int lo, int hi) {
        if (l <= lo and hi <= r) {
            tree[node].push_back({a, b, 0});
            return;
        }
        if (lo > r or hi < l) return;
 
        int mid = midpoint(lo, hi);
        update(a, b, l, r, node << 1, lo, mid);
        update(a, b, l, r, node << 1 | 1, mid + 1, hi);
    }
 
    void update(int a, int b, int l, int r) {//[l, r] -> active
        update(a, b, l, r, 1, 0, s - 1);
    }
 
    void dfs(int node, int lo, int hi) {
        for (auto &[a, b, united] : tree[node])
            united = d.unite(a, b);
 
        if (lo != hi) {
            int mid = midpoint(lo, hi);
            dfs(node << 1, lo, mid);
            dfs(node << 1 | 1, mid + 1, hi);
        }
        else ans[lo] = d.components;
 
        for (auto &[a, b, united] : tree[node])
            if (united) d.rollback();
    }
 
    void dfs() {
        dfs(1, 0, s - 1);
    }
};
 
int32_t main() {
 
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
 
    int n, m, q;
    cin >> n >> m >> q;
 
    vector<map<int, int>> mp(n);
    vector<pair<int, int>> edges;
 
    for (int i = 0; i < m; i++) {
        int a, b;
        cin >> a >> b;
        if (a > b) swap(a, b);
        a--, b--;
 
        edges.emplace_back(a, b);
        mp[a][b] = 0;
    }
 
    Dynamic_Connectivity dc(q + 1, n);
    for (int i = 1; i <= q; i++) {
        int op, a, b;
        cin >> op >> a >> b;
        if (a > b) swap(a, b);
        a--, b--;
 
        if (--op) {
            auto it = mp[a].find(b);
            dc.update(a, b, it->second, i - 1);
            it->second = -1;
        }
        else {
            edges.emplace_back(a, b);
            mp[a][b] = i;
        }
    }
 
    for (auto &[a, b] : edges) {
        int val = mp[a][b];
        if (val != -1) {
            dc.update(a, b, val, q);
        }
    }
 
    dc.dfs();
    for (int i = 0; i <= q; i++)
        cout << dc.ans[i] << " ";
 
    return 0;
}
]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>Dynamic_Connectivity_cses</tabTrigger>
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <!-- <scope>source.python</scope> -->
</snippet>
