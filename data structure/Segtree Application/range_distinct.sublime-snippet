<snippet>
    <content><![CDATA[
//https://cses.fi/problemset/task/1734
#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#define all(x)         x.begin(), x.end()

using namespace std;
using namespace __gnu_pbds;

struct custom_hash {
    static uint64_t splitmix64(uint64_t x) {
        // http://xorshift.di.unimi.it/splitmix64.c
        x += 0x9e3779b97f4a7c15;
        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
        return x ^ (x >> 31);
    }

    size_t operator()(uint64_t x) const {
        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
        return splitmix64(x + FIXED_RANDOM);
    }

    template<typename L, typename R>
    size_t operator()(pair<L, R> const& Y) const {
        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
        return splitmix64(Y.first * 31ull + Y.second + FIXED_RANDOM);
    }
};

class SegTree {
public:
    vector<vector<int>> tree;
    int s = 1, IDENTITY_ELEMENT = 0;

    SegTree(vector<int> &a) {
        int n = static_cast<int>(a.size());
        while (s < n) s *= 2;
        tree.resize(2 * s);

        for (int i = 0; i < n; i++)
            tree[s + i] = {a[i]};

        for (int i = s - 1; i >= 1; i--)
            tree[i] = merge(tree[2 * i], tree[2 * i + 1]);
    }

    int query(int l, int r, int node, int lo, int hi) {
        if (l <= lo and hi <= r) {
            int cnt = lower_bound(all(tree[node]), l) - tree[node].begin();
            return cnt;
        }
        if (lo > r or hi < l) return IDENTITY_ELEMENT;

        int mid = midpoint(lo, hi);
        int lhs = query(l, r, 2 * node, lo , mid);
        int rhs = query(l, r, 2 * node + 1, mid + 1, hi);

        return lhs + rhs;
    }

    void update(int i, int val) {
        apply(s + i, val);
        for (int j = (s + i) / 2; j >= 1; j /= 2) {
            tree[j] = merge(tree[2 * j], tree[2 * j + 1]);
        }
    }

    int query(int l, int r) {
        return query(l, r, 1, 0, s - 1);
    }

    void apply(int node, int val) {
        tree[node] = {val};
        return;
    }

    vector<int> merge(vector<int> &lhs, vector<int> &rhs) {
        int N = lhs.size(), M = rhs.size();

        vector<int> v(N + M);
        int i = 0, j = 0, p = 0;
        while (i < N and j < M) {
            if (lhs[i] <= rhs[j]) v[p] = lhs[i++];
            else v[p] = rhs[j++];
            p++;
        }

        while (i < N) v[p++] = lhs[i++];
        while (j < M) v[p++] = rhs[j++];

        assert(p == N + M);
        return v;
    }
};

int32_t main() {

    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    int N, Q;
    cin >> N >> Q;

    vector<int> A(N + 1), pre(N + 1);
    for (int i = 1; i <= N; i++)
        cin >> A[i];

    gp_hash_table<int, int, custom_hash> mp;
    for (int i = 1; i <= N; i++) {
        pre[i] = mp[A[i]];
        mp[A[i]] = i;
    }

    SegTree st(pre);

    while (Q--) {
        int l, r;
        cin >> l >> r;
        cout << st.query(l, r) << "\n";
    }

    return 0;
}
]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>range_distinct</tabTrigger>
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <!-- <scope>source.python</scope> -->
</snippet>
