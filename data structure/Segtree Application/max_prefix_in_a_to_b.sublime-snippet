<snippet>
	<content><![CDATA[
class SegTree {
public:
    vector<pair<int, int>> tree;//sum, maxi
    int s = 1;
    pair<int, int> IDENTITY_ELEMENT = {0, 0};

    SegTree(vector<int> &a) {
        int n = static_cast<int>(a.size());
        while (s < n) s *= 2;
        tree.resize(2 * s, IDENTITY_ELEMENT);

        for (int i = 0; i < n; i++)
            tree[s + i] = {a[i], max(0ll, a[i])};

        for (int i = s - 1; i >= 1; i--)
            tree[i] = merge(tree[2 * i], tree[2 * i + 1]);
    }

    pair<int, int> query(int l, int r, int node, int lo, int hi) {
        if (l <= lo and hi <= r) return tree[node];
        else if (lo > r or hi < l) return IDENTITY_ELEMENT;

        int mid = (lo + hi) / 2;
        auto lhs = query(l, r, 2 * node, lo , mid);
        auto rhs = query(l, r, 2 * node + 1, mid + 1, hi);

        return merge(lhs, rhs);
    }

    void update(int l, int r, int val, int node, int lo, int hi) {
        if (l <= lo and hi <= r) {
            tree[node] = {val, max(0ll, val)}; //remember to change this
            return;
        }
        else if (lo > r or hi < l) return;

        int mid = (lo + hi) / 2;
        update(l, r, val, 2 * node, lo , mid);
        update(l, r, val, 2 * node + 1, mid + 1, hi);

        tree[node] = merge(tree[2 * node], tree[2 * node + 1]);
    }

    pair<int, int> query(int l, int r) {
        return query(l, r, 1, 0, s - 1);
    }

    void update(int l, int r, int val) {
        update(l, r, val, 1, 0, s - 1);
    }

    pair<int, int> merge(pair<int, int> lhs, pair<int, int> rhs) {
        int l = lhs.first + rhs.first;
        int r = max({0ll, lhs.second, lhs.first + rhs.second});
        return {l, r};
    }
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>max_prefix_in_a_to_b</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
