<snippet>
	<content><![CDATA[

int ip1, ip2;
const int p1 = 137;
const int p2 = 277;
const int mod1 = 127657753;
const int mod2 = 987654319;

int bexp(int a, int b, int m) {
    int ans = 1;
    while (b) {
        if (b & 1) ans = (ll)ans * a % m;
        a = (ll)a * a % m;
        b >>= 1;
    }
    return ans % m;
}

const int N = (int)1e6;
array<int, 2> pw[N], ipw[N];

void precompute() {
    pw[0] = {1, 1}, ipw[0] = {1, 1};
    ip1 = bexp(p1, mod1 - 2, mod1);
    ip2 = bexp(p2, mod2 - 2, mod2);

    for (int i = 1; i < N; i++) {
        pw[i][0] = (ll)pw[i - 1][0] * p1 % mod1;
        pw[i][1] = (ll)pw[i - 1][1] * p2 % mod2;

        ipw[i][0] = (ll)ipw[i - 1][0] * ip1 % mod1;
        ipw[i][1] = (ll)ipw[i - 1][1] * ip2 % mod2;
    }
}

class HashedString {
public:
    int n;
    vector<array<int, 2>> hash;
    HashedString(string &s) : n(size(s)), hash(n) {
        hash[0] = {s[0], s[0]};
        for (int i = 1; i < n; i++) {
            hash[i][0] = (hash[i - 1][0] + (ll)pw[i][0] * s[i] % mod1) % mod1;
            hash[i][1] = (hash[i - 1][1] + (ll)pw[i][1] * s[i] % mod2) % mod2;
        }
    }

    array<int, 2> getHash(int l, int r) {
        assert(0 <= l and l <= r and r < n);
        if (!l) return hash[r];

        array<int, 2> ans;
        ans[0] = (hash[r][0] - hash[l - 1][0] + mod1) * (ll)ipw[l][0] % mod1;
        ans[1] = (hash[r][1] - hash[l - 1][1] + mod2) * (ll)ipw[l][1] % mod2;

        return ans;
    }
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>StringHashing</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
