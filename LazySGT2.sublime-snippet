<snippet>
	<content><![CDATA[
template<typename Node, typename Update>
struct LazySGT {
    vector<Node> tree;
    vector<bool> lazy;
    vector<Update> updates;
    int n, s = 1;
    LazySGT(vector<ll> &a) {// change if type updated
        n = static_cast<int>(a.size());
        while (s < 2 * n) s = s << 1;

        tree.resize(s, Node());
        lazy.resize(s, false);
        updates.resize(s, Update());
        build(0, n - 1, 1, a);
    }
    void build(int start, int end, int index, vector<ll> &a) {// Never change this
        if (start == end)   {
            tree[index] = Node(a[start]);
            return;
        }
        int mid = (start + end) / 2;
        build(start, mid, 2 * index, a);
        build(mid + 1, end, 2 * index + 1, a);
        tree[index].merge(tree[2 * index], tree[2 * index + 1]);
    }
    void pushdown(int index, int start, int end) {
        if (lazy[index]) {
            int mid = (start + end) / 2;
            apply(2 * index, start, mid, updates[index]);
            apply(2 * index + 1, mid + 1, end, updates[index]);
            updates[index] = Update();
            lazy[index] = 0;
        }
    }
    void apply(int index, int start, int end, Update& u) {
        if (start != end) {
            lazy[index] = 1;
            updates[index].combine(u, start, end);
        }
        u.apply(tree[index], start, end);
    }
    void update(int start, int end, int index, int left, int right, Update& u) {  // Never Change this
        if (start > right || end < left)
            return;
        if (start >= left && end <= right) {
            apply(index, start, end, u);
            return;
        }
        pushdown(index, start, end);
        int mid = (start + end) / 2;
        update(start, mid, 2 * index, left, right, u);
        update(mid + 1, end, 2 * index + 1, left, right, u);
        tree[index].merge(tree[2 * index], tree[2 * index + 1]);
    }
    Node query(int start, int end, int index, int left, int right) {// Never change this
        if (start > right || end < left)
            return Node();
        if (start >= left && end <= right) {
            pushdown(index, start, end);
            return tree[index];
        }
        pushdown(index, start, end);
        int mid = (start + end) / 2;
        Node l, r, ans;
        l = query(start, mid, 2 * index, left, right);
        r = query(mid + 1, end, 2 * index + 1, left, right);
        ans.merge(l, r);
        return ans;
    }
    void make_update(int left, int right, ll val) {// pass in as many parameters as required
        Update new_update = Update(val);// may change
        update(0, n - 1, 1, left, right, new_update);
    }
    Node make_query(int left, int right) {
        return query(0, n - 1, 1, left, right);
    }
};

struct Node1 {
    ll val;// may change
    Node1() {// Identity element
        val = 0;// may change
    }
    Node1(ll p1) {// Actual Node
        val = p1;// may change
    }
    void merge(Node1 &l, Node1 &r) {// Merge two child nodes
        val = (l.val + r.val);// may change
    }
};

struct Update1 {
    ll val;// may change
    Update1() {// Identity update
        val = 0;
    }
    Update1(ll val1) {// Actual Update
        val = val1;
    }
    void apply(Node1 &a, int start, int end) {// apply update to given node
        a.val = val * (end - start + 1);// may change
    }
    void combine(Update1& new_update, int start, int end) {
        val = new_update.val;
    }
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>LazySGT2</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
