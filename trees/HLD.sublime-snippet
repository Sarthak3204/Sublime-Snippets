<snippet>
	<content><![CDATA[
class SparseTable {
public:
    int n;
    vector<int> lg;
    vector<vector<int>> table;

    SparseTable() {}
    SparseTable(vector<int> &euler, vector<int> &depth) : n(size(euler)) {
        lg.resize(n + 1);
        for (int i = 2; i <= n; i++)
            lg[i] = lg[i / 2] + 1;

        table.resize(lg[n] + 1);
        table[0] = euler;

        for (int j = 1; j <= lg[n]; j++) {
            table[j].resize(n - (1 << j) + 1);
            for (int i = 0; i + (1 << j) - 1 < n; i++) {
                int left = table[j - 1][i], right = table[j - 1][i + (1 << (j - 1))];
                table[j][i] = (depth[left] < depth[right] ? left : right);
            }
        }
    }

    int query(int l, int r, vector<int> &depth) {
        int j = lg[r - l + 1];
        int left = table[j][l], right = table[j][r - (1 << j) + 1];
        return (depth[left] < depth[right] ? left : right);
    }
};

class HLD {
public:
    int tour = 0, timer = -1;
    vector<int> tin, tout, depth, parent, subtree, tourList, tourStart, heavyRoot, euler;
    SparseTable st;

    HLD(int root, int n, vector<int> adj[]) :
        tin(n), tout(n), depth(n), parent(n), subtree(n), tourList(n), tourStart(n), heavyRoot(n) {
        dfs(root, -1, adj);
        dfsTour(root, false, adj);
        st = SparseTable(euler, depth);
    }

    void dfs(int v, int p, vector<int> adj[]) {
        parent[v] = p, subtree[v] = 1;
        depth[v] = p < 0 ? 0 : depth[p] + 1;

        for (auto &u : adj[v]) {
            if (u == p) continue;
            dfs(u, v, adj);
            subtree[v] += subtree[u];
        }
        // Heavy-light subtree reordering.
        sort(all(adj[v]), [&](const int &lhs, const int &rhs) {
            return subtree[lhs] > subtree[rhs];
        });
    }

    void dfsTour(int v, bool heavy, vector<int> adj[]) {
        tin[v] = ++timer;

        heavyRoot[v] = heavy ? heavyRoot[parent[v]] : v;

        tourList[tour] = v;
        tourStart[v] = tour++;

        euler.push_back(v);

        bool heavyChild = true;
        for (auto &u : adj[v]) {
            if (u == parent[v]) continue;
            dfsTour(u, heavyChild, adj);
            euler.push_back(v);
            heavyChild = false;
        }

        tout[v] = ++timer;
    }

    inline int getLCA(int a, int b) {
        int l = tin[a], r = tin[b];
        if (l > r) swap(l, r);
        return st.query(l, r, depth);
        // if MLE then reomve SparseTable and use logN for lca query
        // for (; heavyRoot[a] != heavyRoot[b]; a = parent[heavyRoot[a]])
        //     if (depth[heavyRoot[a]] < depth[heavyRoot[b]]) swap(a, b);
        // if (depth[a] > depth[b]) swap(a, b);
        // return a;
    }

    inline int getDistance(int a, int b) {
        return depth[a] + depth[b] - 2 * depth[getLCA(a, b)];
    }

    inline bool isAncestor(int a, int b) {//whether a is ancestor of b
        return (tin[a] <= tin[b] and tout[b] <= tout[a]);
    }

    inline bool onPath(int x, int a, int b) { //whether x is on path from a to b
        return ((isAncestor(x, a) or isAncestor(x, b)) and isAncestor(getLCA(a, b), x));
    }

    int kthAncestor(int k, int a) {
        if (k > depth[a]) return -1;
        while (a >= 0) {
            int root = heavyRoot[a];
            if (k <= depth[a] - depth[root]) {
                return tourList[tourStart[a] - k];
            }
            else {
                k -= depth[a] - depth[root] + 1;
                a = parent[root];
            }
        }
        return a;
    }

    int kthNodeOnPath(int k, int a, int b) {
        int lca = getLCA(a, b);
        int left = depth[a] - depth[lca];
        int right = depth[b] - depth[lca];
        if (0 <= k and k <= left + right) {
            if (k < left) return kthAncestor(k, a);
            return kthAncestor(left + right - k, b);
        }
        return -1;
    }
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>HLD</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
