<snippet>
	<content><![CDATA[
class SparseTable {
public:
    int n;
    vector<int> lg;
    vector<vector<int>> table;

    SparseTable() {}
    SparseTable(vector<int> &euler, vector<int> &depth) : n(size(euler)) {
        lg.resize(n + 1);
        for (int i = 2; i <= n; i++)
            lg[i] = lg[i / 2] + 1;

        table.resize(lg[n] + 1);
        table[0] = euler;

        for (int j = 1; j <= lg[n]; j++) {
            table[j].resize(n - (1 << j) + 1);
            for (int i = 0; i + (1 << j) - 1 < n; i++) {
                int lhs = table[j - 1][i], rhs = table[j - 1][i + (1 << (j - 1))];
                table[j][i] = (depth[lhs] < depth[rhs] ? lhs : rhs);
            }
        }
    }

    int query(int l, int r, vector<int> &depth) {
        int j = lg[r - l + 1];
        int lhs = table[j][l], rhs = table[j][r - (1 << j) + 1];
        return (depth[lhs] < depth[rhs] ? lhs : rhs);
    }
};

class LCA {
public:
    int timer = -1;
    vector<int> depth, euler, tin, tout, parent;
    SparseTable st;

    LCA(int root, int n, vector<int> adj[]) : tin(n), tout(n), depth(n), parent(n) {
        dfs(root, -1, adj, 0);
        st = SparseTable(euler, depth);
    }

    void dfs(int v, int p, vector<int> adj[], int d) {
        tin[v] = ++timer;

        euler.push_back(v);
        depth[v] = d, parent[v] = p;

        for (auto &u : adj[v]) {
            if (u == p) continue;
            dfs(u, v, adj, d + 1);
            euler.push_back(v);
        }

        tout[v] = ++timer;
    }

    inline int getLCA(int a, int b) {
        int l = tin[a], r = tin[b];
        if (l > r) swap(l, r);
        return st.query(l, r, depth);
    }

    inline int getDistance(int a, int b) {
        return depth[a] + depth[b] - 2 * depth[getLCA(a, b)];
    }

    inline bool isAncestor(int a, int b) {//whether a is ancestor of b
        return (tin[a] <= tin[b] and tout[b] <= tout[a]);
    }

    inline bool onPath(int x, int a, int b) {//whether x is on path from a to b
        return ((isAncestor(x, a) or isAncestor(x, b)) and isAncestor(getLCA(a, b), x));
    }
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>LCA</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
