<snippet>
    <content><![CDATA[
//https://cses.fi/problemset/task/1691
//starting and ending at 1

int n, m;
cin >> n >> m;
    
vector<int> degree(n), edge_used(m), path;
vector<pair<int, int>> adj[n];

for (int i = 0; i < m; i++) {
    int u, v;
    cin >> u >> v;
    degree[--u]++, degree[--v]++;
    adj[u].push_back({v, i});
    adj[v].push_back({u, i});
}

vector<int> odd;
for (int i = 0; i < n; i++) {
    if (degree[i] & 1) odd.push_back(i);
}

if (!odd.empty() and (odd.size() != 2 or odd[0] != 0)) {
    cout << "IMPOSSIBLE\n";
    return 0;
}

function<void(int)> dfs = [&](int v) {
    while (!adj[v].empty()) {
        auto [u, ind] = adj[v].back();
        adj[v].pop_back();
        if (edge_used[ind]) continue;
        edge_used[ind] = 1;
        dfs(u);
    }
    path.push_back(v);
};

dfs(0);

for (int i = 0; i < n; i++) {
    if (!adj[i].empty()) {
        cout << "IMPOSSIBLE\n";
        return 0;
    }
}

reverse(path.begin(), path.end());
if (path.front() != path.back()) {
    cout << "IMPOSSIBLE\n";
    return 0;
}

for (auto &x : path) cout << x + 1 << " ";
cout << "\n";
]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>graphs_eulerian_path_undirected_graph</tabTrigger>
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <!-- <scope>source.python</scope> -->
</snippet>
