<snippet>
	<content><![CDATA[
//Function to serialize a tree and return a list containing nodes of tree.
vector<int> serialize(Node *root)  {
    vector<int> ans;

    queue<Node*> q;
    q.push(root);

    while (!q.empty()) {
        Node *temp = q.front(); q.pop();
        ans.push_back((temp ? temp->data : -1));
        if (temp) q.push(temp->lhs), q.push(temp->rhs);
    }

    return ans;
}

//Function to deserialize a list and construct the tree.
Node *deSerialize(vector<int> &a) {
    int n = a.size();
    assert(n & 1);
    queue<Node*> q;

    Node *root = new Node(a[0]);
    q.push(root);

    for (int i = 1; i < n; i += 2) {
        Node *v = q.front(); q.pop();

        if (a[i] != -1) {
            Node *l = new Node(a[i]);
            v->lhs = l, q.push(l);
        }

        if (a[i + 1] != -1) {
            Node *r = new Node(a[i + 1]);
            v->rhs = r, q.push(r);
        }
    }

    return root;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>binary_trees_serialize_deserialize</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
