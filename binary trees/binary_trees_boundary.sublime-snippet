<snippet>
	<content><![CDATA[
vector<int> boundary(Node *root) {
    vector<int> ans;
    ans.push_back(root->data);

    if (!root->left and !root->right) return ans;

    Node *temp = root->left;
    while (temp) {
        Node *l = temp->left, *r = temp->right;
        if (!l and !r) break;
        ans.push_back(temp->data);
        temp = (l ? l : r);
    }

    auto f = [&](auto && f, Node * temp) -> void {
        Node *l = temp->left, *r = temp->right;
        if (!l and !r) {
            ans.push_back(temp->data);
            return;
        }
        if (l) f(f, l);
        if (r) f(f, r);
    };

    temp = root;
    f(f, temp);

    vector<int> b;
    temp = root->right;

    while (temp) {
        Node *l = temp->left, *r = temp->right;
        if (!l and !r) break;
        b.push_back(temp->data);
        temp = (r ? r : l);
    }

    reverse(b.begin(), b.end());
    ans.insert(ans.end(), b.begin(), b.end());

    return ans;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>binary_trees_boundary</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
