<snippet>
	<content><![CDATA[
const int mod = 998244353;
struct mint {
    int val;
    mint(long long v = 0) {
        if (v < 0) v = v % mod + mod;
        if (v >= mod) v %= mod;
        val = v;
    }

    static int mod_inv(int a, int m = mod) {
        int g = m, r = a, x = 0, y = 1;
        while (r != 0) {
            int q = g / r;
            g %= r; swap(g, r);
            x -= q * y; swap(x, y);
        } return x < 0 ? x + m : x;
    }

    explicit operator int() const {return val;}

    mint& operator+=(const mint &other) {val += other.val; if (val >= mod) val -= mod; return *this;}
    mint& operator-=(const mint &other) {val -= other.val; if (val < 0) val += mod; return *this;}

    static unsigned fast_mod(uint64_t x, unsigned m = mod) {
#if !defined(_WIN32) || defined(_WIN64)
        return x % m;
#endif
        unsigned x_high = x >> 32, x_low = (unsigned) x;
        unsigned quot, rem;
        asm("divl %4\n"
            : "=a" (quot), "=d" (rem)
            : "d" (x_high), "a" (x_low), "r" (m));
        return rem;
    }

    mint& operator*=(const mint &other) {val = fast_mod((uint64_t) val * other.val); return *this;}
    mint& operator/=(const mint &other) {return *this *= other.inv();}

    friend mint operator+(const mint &a, const mint &b) {return mint(a) += b;}
    friend mint operator-(const mint &a, const mint &b) {return mint(a) -= b;}
    friend mint operator*(const mint &a, const mint &b) {return mint(a) *= b;}
    friend mint operator/(const mint &a, const mint &b) {return mint(a) /= b;}

    mint& operator++() {val = val == mod - 1 ? 0 : val + 1; return *this;}
    mint& operator--() {val = val == 0 ? mod - 1 : val - 1; return *this;}
    mint operator++(int32_t) {mint before = *this; ++*this; return before;}
    mint operator--(int32_t) {mint before = *this; --*this; return before;}
    mint operator-() const {return val == 0 ? 0 : mod - val;}

    bool operator==(const mint &other) const {return val == other.val;}
    bool operator!=(const mint &other) const {return val != other.val;}

    mint inv() const {return mod_inv(val);}
    mint pow(long long p) const {
        assert(p >= 0);
        mint a = *this, result = 1;
        while (p > 0) {
            if (p & 1) result *= a;
            a *= a; p >>= 1;
        } return result;
    }

    friend ostream& operator << (ostream &stream, const mint &m) {return stream << m.val;}
    friend istream& operator >> (istream &stream, mint &m) {return stream >> m.val;}
};

const int N = (int)2e5;
mint inv[N + 1], fact[N + 1], inv_fact[N + 1];

void initiate() {
    inv[1] = fact[0] = inv_fact[0] = 1;
    for (int i = 2; i <= N; i++) 
        inv[i] = (mod - mod / i) * inv[mod % i];
    
    for (int i = 1; i <= N; i++) {
        fact[i] = fact[i - 1] * i;
        inv_fact[i] = inv_fact[i - 1] * inv[i];
    }
}

mint ncr(int n, int r) {
    if (n < 0 || r < 0 || r > n) return 0;
    return fact[n] * inv_fact[n - r] * inv_fact[r];
}

mint ncr_linear(int n, int r) {
    if (n < 0 || r < 0 || r > n) return 0;
    mint ans = 1;
    for (int i = n - r + 1; i <= n; i++)
        ans *= i;
    return ans * inv_fact[r];
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>combinatorics_with_mint</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
